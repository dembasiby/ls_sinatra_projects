require 'sinatra'
require 'sinatra/content_for'
require 'sinatra/reloader'
require 'tilt/erubis'

configure do
  enable :sessions
  set :session_secret, 'secret'
end

before do
  session[:lists] ||= []
end

get '/' do
  redirect '/lists'
end

# GET  /lists      -> view all lists
# GET  /lists/new  -> new list form
# POST /lists      -> create new list
# GET  /lists/1    -> view a single list

# View all of the lists
get '/lists' do
  @lists = session[:lists]
  erb :lists, layout: :layout
end

# Render the new list form
get '/lists/new' do
  erb :new_list, layout: :layout
end

# Return an error message if the name is invalid. return nil if name is valid.
def error_for_list_name(name)
  if !(1..100).cover? name.size
    'List name must be  between 1 and 100 characters.'
  elsif session[:lists].any? { |list| list[:name] == name }
    'List name must be unique.'
  end
end

# Return an error message if the name is invalid. return nil if name is valid.
def error_for_todo(name)
  if !(1..100).cover? name.size
    'Todo name must be  between 1 and 100 characters.'
  end
end

# Create a new list
post '/lists' do
  list_name = params[:list_name].strip

  error = error_for_list_name(list_name)
  if error
    session[:error] = error
    erb :new_list, layout: :layout
  else
    session[:lists] << { name: list_name, todos: [] }
    session[:success] = 'The new list has been created.'
    redirect '/lists'
  end
end

# View a single list and all its todos
get '/lists/:id' do
  @list_id = params[:id].to_i
  @list = session[:lists][@list_id]
  erb :list, layout: :layout
end

# Edit an existing todo list
get '/lists/:id/edit' do
  @list_id = params[:id].to_i
  @list = session[:lists][@list_id]
  erb :edit_list, layout: :layout
end

# Update an existing todo list
post '/lists/:id' do
  list_name = params[:list_name].strip
  @list_id = params[:id].to_i
  @list = session[:lists][@list_id]

  error = error_for_list_name(list_name)
  if error
    session[:error] = error
    erb :edit_list, layout: :layout
  else
    @list[:name] = list_name
    session[:success] = 'The list has been updated.'
    redirect "/lists/#{@list_id}"
  end
end

# Delete a single todo list
post '/lists/:id/delete' do
  @list_id = params[:id].to_i
  session[:lists].delete_at(@list_id)
  session[:success] = 'The list has been deleted'
  redirect '/lists'
end

# Add a new todo to a list
post '/lists/:list_id/todos' do
  @list_id = params[:list_id].to_i
  @list = session[:lists][@list_id]
  text = params[:todo].strip

  error = error_for_todo(text)
  if error
    session[:error] = error
    erb :list, layout: :layout
  else
    @list[:todos] << {name: text, complete: false }
    session[:success] = 'The todo was added.'
    redirect "/lists/#{@list_id}"
  end
end

# Delete a todo from a list
post '/lists/:list_id/todos/:index/delete' do
  @list_id = params[:list_id].to_i
  @list = session[:lists][@list_id]
  index = params[:index].to_i
  @list[:todos].delete_at(index)
  session[:success] = 'The todo item has been deleted'
  redirect "/lists/#{@list_id}"
end

# Update the status of a todo
post '/lists/:list_id/todos/:id'  do
  @list_id = params[:list_id].to_i
  @list = session[:lists][@list_id]

  index = params[:id].to_i
  is_completed = params[:completed] == "true"
  @list[:todos][index][:completed] = is_completed

  session[:success] = 'The todo item has been updated'
  redirect "/lists/#{@list_id}"
end


# Mark all the todos as complete
post '/lists/:list_id/todos/complete'  do
  @list_id = params[:list_id].to_i
  @list = session[:lists][@list_id]

  @list[:todos].each do |todo|
    todo[:completed] = true
  end

  session[:success] = 'All todo items have been updated'
  redirect "/lists/#{@list_id}"
end
